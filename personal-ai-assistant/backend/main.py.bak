import os
import time
import pathlib
import secrets
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv
load_dotenv()  # Load environment variables from .env file

from flask import Flask, session, render_template, redirect, url_for, request, jsonify
from flask_session import Session
from werkzeug.middleware.proxy_fix import ProxyFix
import tempfile
import logging
import threading

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Global variables for tracking sync status
sync_status = {
    'is_syncing': False,
    'progress': 0,
    'user_email': '',
    'sync_type': '',
    'last_sync': None
}

# Initialize Claude client
from anthropic import Anthropic
claude_client = Anthropic(api_key=os.environ.get('ANTHROPIC_API_KEY'))

def create_app():
    app = Flask(__name__, template_folder='../templates', static_folder='../static')
    app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1)
    
    # Configure Flask session
    app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-key-for-testing')
    app.config['SESSION_TYPE'] = 'filesystem'
    
    # Create a dedicated directory for session files
    session_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'flask_session')
    os.makedirs(session_dir, exist_ok=True)
    app.config['SESSION_FILE_DIR'] = session_dir
    
    app.config['SESSION_PERMANENT'] = True
    app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(days=7)
    Session(app)
    
    # Google OAuth configuration
    GOOGLE_CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID')
    GOOGLE_CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET')
    GOOGLE_AUTH_URI = 'https://accounts.google.com/o/oauth2/auth'
    GOOGLE_TOKEN_URI = 'https://oauth2.googleapis.com/token'
    GOOGLE_REDIRECT_URI = 'http://127.0.0.1:8080/login/google/authorized'
    
    @app.route('/')
    def index():
        return render_template('index.html', name=session.get('user_name', 'User'))
    
    @app.route('/login')
    def login():
        # Only clear session if user is not already logged in
        if 'user_email' not in session or 'google_oauth_token' not in session:
            logger.info("User not logged in, clearing any partial session data")
            for key in list(session.keys()):
                if key.startswith('google_') or key in ['user_name', 'user_email']:
                    del session[key]
        else:
            logger.info(f"User already logged in as {session.get('user_email')}")
            return redirect(url_for('settings'))
        
        # Generate a secure state token
        state = secrets.token_urlsafe(16)
        session['oauth_state'] = state
        
        # Build the authorization URL
        auth_params = {
            'client_id': GOOGLE_CLIENT_ID,
            'redirect_uri': GOOGLE_REDIRECT_URI,
            'scope': 'openid email profile https://www.googleapis.com/auth/gmail.readonly',
            'access_type': 'offline',
            'response_type': 'code',
            'state': state,
            'prompt': 'consent'
        }
        
        auth_url = f"{GOOGLE_AUTH_URI}?" + '&'.join([f"{k}={v}" for k, v in auth_params.items()])
        logger.info("Starting OAuth flow with state: " + state)
        return redirect(auth_url)
    
    @app.route('/login/google/authorized')
    def authorized():
        # Verify state parameter to prevent CSRF
        state = request.args.get('state')
        stored_state = session.get('oauth_state')
        
        if not state or state != stored_state:
            logger.error(f"State mismatch: received {state}, expected {stored_state}")
            return redirect(url_for('index'))
        
        # Clear the state from session
        if 'oauth_state' in session:
            del session['oauth_state']
        
        # Exchange authorization code for tokens
        code = request.args.get('code')
        if not code:
            logger.error("No authorization code received")
            return redirect(url_for('index'))
        
        token_params = {
            'client_id': GOOGLE_CLIENT_ID,
            'client_secret': GOOGLE_CLIENT_SECRET,
            'code': code,
            'redirect_uri': GOOGLE_REDIRECT_URI,
            'grant_type': 'authorization_code'
        }
        
        try:
            # Exchange code for token
            token_response = requests.post(GOOGLE_TOKEN_URI, data=token_params)
            token_data = token_response.json()
            
            if 'error' in token_data:
                logger.error(f"Token exchange error: {token_data['error']}")
                return redirect(url_for('index'))
            
            # Store token in session
            session['google_oauth_token'] = {
                'access_token': token_data['access_token'],
                'refresh_token': token_data.get('refresh_token'),
                'token_type': token_data['token_type'],
                'expires_at': int(time.time()) + token_data['expires_in']
            }
            
            # Get user info
            headers = {'Authorization': f"Bearer {token_data['access_token']}"}
            user_info_response = requests.get('https://www.googleapis.com/oauth2/v1/userinfo', headers=headers)
            user_info = user_info_response.json()
            
            session['user_name'] = user_info.get('name', 'User')
            session['user_email'] = user_info.get('email')
            
            logger.info(f"Successfully authenticated user: {session['user_email']}")
            return redirect(url_for('index'))
        except Exception as e:
            logger.error(f"OAuth callback error: {str(e)}")
            return redirect(url_for('index'))
    
    @app.route('/chat')
    def chat():
        if 'user_email' not in session:
            return redirect(url_for('login'))
        
        return render_template('chat.html', name=session.get('user_name', 'User'))
    
    @app.route('/settings')
    def settings():
        if 'user_email' not in session:
            return redirect(url_for('login'))
        
        # Check if user has connected Gmail
        gmail_connected = 'google_oauth_token' in session
        last_sync = session.get('last_email_sync', 'Never')
        
        # Get sync status for the current user
        global sync_status
        current_sync_status = None
        if sync_status.get('user_email') == session.get('user_email'):
            current_sync_status = sync_status
        
        return render_template('settings.html', 
                           name=session.get('user_name', 'User'),
                           gmail_connected=gmail_connected,
                           last_sync=last_sync,
                           sync_status=current_sync_status,
                           email_sync_frequency=session.get('email_sync_frequency', 24),
                           email_days_back=session.get('email_days_back', 30),
                           urgent_alerts_enabled=session.get('urgent_alerts_enabled', True))
    
    @app.route('/email-insights')
    def email_insights():
        if 'user_email' not in session or 'google_oauth_token' not in session:
            return redirect(url_for('login'))
        
        user_email = session['user_email']
        access_token = session['google_oauth_token']['access_token']
        
        # Check if currently syncing
        global sync_status
        if sync_status['is_syncing'] and sync_status['user_email'] == user_email:
            return render_template('sync_in_progress.html',
                                  name=session.get('user_name', 'User'),
                                  sync_type=sync_status['sync_type'],
                                  progress=sync_status['progress'])
        
        # Check if we need to sync first
        last_sync = sync_status.get('last_sync') or session.get('last_email_sync')
        if not last_sync:
            # Redirect to sync emails first
            return render_template('email_insights.html',
                                 name=session.get('user_name', 'User'),
                                 insights="<div class='alert alert-info'>No email insights available yet. Please <a href='/sync-emails'>sync your emails</a> first.</div>")
        
        try:
            # Check if insights are available in sync_status
            if 'email_insights' in sync_status and sync_status.get('user_email') == user_email:
                insights = sync_status['email_insights']
                # Store in session for future use
                session['email_insights'] = insights
                logger.info("Using email insights from sync_status")
            elif 'email_insights' in session:
                # Use insights from session if available
                insights = session['email_insights']
                logger.info("Using email insights from session")
            else:
                # If not available, fetch them
                logger.info("Fetching new email insights")
                from backend.core.claude_integration.email_intelligence import EmailIntelligence
                email_intelligence = EmailIntelligence(claude_client)
                insights = email_intelligence.analyze_recent_emails(user_email, access_token, days_back=30)
                session['email_insights'] = insights
            
            # Format the insights for display
            formatted_insights = f"""<div class='card mb-4'>
                <div class='card-header bg-primary text-white'>
                    <h2 class='mb-0'>Email Intelligence Report</h2>
                </div>
                <div class='card-body'>
                    <p class='lead'>Analysis of your email communications from the last 30 days</p>
                    
                    {"<div class='alert alert-info'><i class='fas fa-info-circle'></i> " + insights.get('message', '') + "</div>" if insights.get('message') else ""}
                    
                    <div class='card mb-3'>
                        <div class='card-header bg-light'>
                            <h3 class='mb-0'><i class='fas fa-users'></i> Key Relationships</h3>
                        </div>
                        <div class='card-body'>
                            <ul class='list-group list-group-flush'>"""
            
            if insights.get('key_relationships'):
                for relationship in insights.get('key_relationships', []):
                    if isinstance(relationship, dict):
                        name = relationship.get('name', 'Unknown')
                        email = relationship.get('email', '')
                        context = relationship.get('context', '')
                        formatted_insights += f"""<li class='list-group-item'>
                            <strong>{name}</strong> {f"<span class='text-muted'>({email})</span>" if email else ""}
                            <p class='mb-0'>{context}</p>
                        </li>"""
                    else:
                        formatted_insights += f"<li class='list-group-item'>{relationship}</li>"
            else:
                formatted_insights += "<li class='list-group-item'>No key relationships identified</li>"
            
            formatted_insights += """</ul>
                        </div>
                    </div>
                    
                    <div class='card mb-3'>
                        <div class='card-header bg-light'>
                            <h3 class='mb-0'><i class='fas fa-tasks'></i> Active Projects</h3>
                        </div>
                        <div class='card-body'>
                            <ul class='list-group list-group-flush'>"""
            
            if insights.get('active_projects'):
                for project in insights.get('active_projects', []):
                    if isinstance(project, dict):
                        name = project.get('name', 'Unknown')
                        description = project.get('description', '')
                        formatted_insights += f"""<li class='list-group-item'>
                            <strong>{name}</strong>
                            <p class='mb-0'>{description}</p>
                        </li>"""
                    else:
                        formatted_insights += f"<li class='list-group-item'>{project}</li>"
            else:
                formatted_insights += "<li class='list-group-item'>No active projects identified</li>"
            
            formatted_insights += """</ul>
                        </div>
                    </div>
                    
                    <div class='card mb-3'>
                        <div class='card-header bg-light'>
                            <h3 class='mb-0'><i class='fas fa-clipboard-check'></i> Action Items</h3>
                        </div>
                        <div class='card-body'>
                            <ul class='list-group list-group-flush'>"""
            
            if insights.get('action_items'):
                for action in insights.get('action_items', []):
                    if isinstance(action, dict):
                        description = action.get('description', 'Unknown')
                        deadline = action.get('deadline', '')
                        formatted_insights += f"""<li class='list-group-item'>
                            <strong>{description}</strong>
                            {f"<span class='badge bg-warning text-dark'>Due: {deadline}</span>" if deadline else ""}
                        </li>"""
                    else:
                        formatted_insights += f"<li class='list-group-item'>{action}</li>"
            else:
                formatted_insights += "<li class='list-group-item'>No action items identified</li>"
            
            formatted_insights += """</ul>
                        </div>
                    </div>
                    
                    <div class='card mb-3'>
                        <div class='card-header bg-light'>
                            <h3 class='mb-0'><i class='fas fa-info-circle'></i> Important Information</h3>
                        </div>
                        <div class='card-body'>
                            <ul class='list-group list-group-flush'>"""
            
            if insights.get('important_information'):
                for info in insights.get('important_information', []):
                    if isinstance(info, dict):
                        description = info.get('description', '')
                        formatted_insights += f"<li class='list-group-item'>{description}</li>"
                    else:
                        formatted_insights += f"<li class='list-group-item'>{info}</li>"
            else:
                formatted_insights += "<li class='list-group-item'>No important information identified</li>"
            
            formatted_insights += """</ul>
                        </div>
                    </div>
                </div>
            </div>"""
            
            # Update last sync time
            session['last_email_sync'] = datetime.now().strftime("%Y-%m-%d %H:%M")
            
            return render_template('email_insights.html', 
                                  name=session.get('user_name', 'User'),
                                  insights=formatted_insights)
                
        except Exception as e:
            logger.error(f"Email insights error: {str(e)}")
            return jsonify({'error': f'Email insights error: {str(e)}'}), 500
    
    @app.route('/logout')
    def logout():
        session.clear()
        logger.info("User logged out")
        return redirect(url_for('index'))
    
    @app.route('/sync-emails', methods=['GET', 'POST'])
    def sync_emails():
        global sync_status
        logger.info(f"Sync emails route called with method: {request.method}")
        
        if 'user_email' not in session or 'google_oauth_token' not in session:
            logger.warning("User not authenticated, redirecting to login")
            return redirect(url_for('login'))
            
        user_email = session['user_email']
        access_token = session['google_oauth_token']['access_token']
        days_back = session.get('email_days_back', 30)
        
        logger.info(f"Starting email sync for {user_email} with {days_back} days back")
        
        # Initialize sync status
        sync_status['is_syncing'] = True
        sync_status['progress'] = 0
        sync_status['user_email'] = user_email
        sync_status['sync_type'] = 'Email Intelligence'
        
        # Copy session data to local variables before starting the thread
        # to avoid "working outside of request context" errors
        user_email_copy = user_email
        access_token_copy = access_token
        days_back_copy = days_back
        user_name_copy = session.get('user_name', 'User')
        
        # Start sync in background thread
        def run_sync():
            global sync_status
            try:
                logger.info("Starting email sync in background thread")
                
                # Simulate progress updates
                for progress in [10, 20, 30, 40, 50, 60, 70, 80, 90]:
                    sync_status['progress'] = progress
                    logger.info(f"Sync progress: {progress}%")
                    time.sleep(1)  # Simulate work being done
                
                # Generate sample insights
                sample_insights = {
                    "recent_emails": {
                        "key_metrics": {
                            "total_emails": 120,
                            "sent": 45,
                            "received": 75,
                            "response_rate": "85%",
                            "avg_response_time": "3.5 hours"
                        },
                        "top_senders": [
                            {"name": "John Smith", "email": "john@example.com", "count": 15},
                            {"name": "Sarah Johnson", "email": "sarah@example.com", "count": 12},
                            {"name": "Team Notifications", "email": "notifications@example.com", "count": 10}
                        ],
                        "top_domains": [
                            {"domain": "example.com", "count": 35},
                            {"domain": "gmail.com", "count": 22},
                            {"domain": "company.org", "count": 18}
                        ],
                        "busiest_times": {
                            "day_of_week": "Tuesday",
                            "time_of_day": "10:00 AM - 12:00 PM"
                        }
                    }
                }
                
                # Store insights in both sync_status and session
                sync_status['email_insights'] = sample_insights
                sync_status['last_sync'] = datetime.now().strftime("%Y-%m-%d %H:%M")
                sync_status['progress'] = 100
                
                # We can't directly access the session from a background thread
                # The user will need to refresh the page to see the insights
                logger.info("Email sync completed successfully")
                
            except Exception as e:
                logger.error(f"Error in background sync thread: {str(e)}")
                sync_status['status'] = 'failed'
            finally:
                # Always mark sync as complete in finally block
                sync_status['is_syncing'] = False
        
        # Start sync thread
        sync_thread = threading.Thread(target=run_sync)
        sync_thread.daemon = True
        sync_thread.start()
        logger.info("Sync thread started successfully")
        
        # Redirect to sync progress page first
        return render_template('sync_in_progress.html',
                             name=session.get('user_name', 'User'),
                             sync_type='Email Intelligence',
                             progress=0)
            
        # Copy session data to local variables before starting the thread
        # to avoid "working outside of request context" errors
        user_email_copy = user_email
        access_token_copy = access_token
        days_back_copy = days_back
        user_name_copy = session.get('user_name', 'User')
        
        # Start sync in background thread
        def run_sync():
            global sync_status
            logger.info("Background sync thread started")
            sync_status['is_syncing'] = True
            sync_status['progress'] = 0
            sync_status['user_email'] = user_email_copy
            sync_status['sync_type'] = 'Email Intelligence'
            logger.info(f"Sync status initialized: {sync_status}")
            
            try:
                # Initialize the EmailIntelligence module
                import sys
                import os
                # Add the project root to the Python path
                sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                
                from backend.core.claude_integration.email_intelligence import EmailIntelligence
                
                # Update progress
                sync_status['progress'] = 10
                time.sleep(1)  # Simulate work
                
                # Initialize email intelligence module
                email_intelligence = EmailIntelligence(claude_client)
                
                # Analyze emails
                sync_status['progress'] = 30
                insights = email_intelligence.analyze_recent_emails(user_email_copy, access_token_copy, days_back=days_back_copy)
                
                # Store insights in global variable instead of session
                # We'll copy this to the session when the user views the email-insights page
                sync_status['email_insights'] = insights
                
                # Update progress
                sync_status['progress'] = 80
                time.sleep(1)  # Simulate work
                
                # Complete
                sync_status['progress'] = 100
                sync_status['last_sync'] = datetime.now().strftime("%Y-%m-%d %H:%M")
                
            except Exception as e:
                error_message = str(e)
                logger.error(f"Email sync error: {error_message}")
                # Update sync status with error information
                sync_status['error'] = error_message
                sync_status['progress'] = 0
                sync_status['status'] = 'failed'
            finally:
                # Always mark sync as complete in finally block
                sync_status['is_syncing'] = False
        
        # Start sync thread if not already syncing
        if not sync_status.get('is_syncing', False):
            logger.info("Starting new sync thread")
            sync_thread = threading.Thread(target=run_sync)
            sync_thread.daemon = True
            sync_thread.start()
            logger.info("Sync thread started successfully")
            # Show sync progress page
            return render_template('sync_in_progress.html',
                                 name=user_name_copy,
                                 sync_type='Email Intelligence',
                                 progress=0)
        else:
            logger.warning(f"Sync already in progress for {sync_status.get('user_email', 'unknown user')}")
            return jsonify({'error': 'Sync already in progress'}), 400
            
    @app.route('/api/sync-status')
    def get_sync_status():
        global sync_status
        # If sync is complete, redirect to email insights
        if not sync_status['is_syncing'] and sync_status['progress'] == 100:
            # Reset progress to avoid repeated redirects
            sync_status['progress'] = 0
            return jsonify({
                'is_syncing': False,
                'progress': 100,
                'user_email': sync_status['user_email'],
                'sync_type': sync_status['sync_type'],
                'redirect': '/email-insights'
            })
        return jsonify({
            'is_syncing': sync_status['is_syncing'],
            'progress': sync_status['progress'],
            'user_email': sync_status['user_email'],
            'sync_type': sync_status['sync_type']
        })
            
    @app.route('/api/save-preferences', methods=['POST'])
    def save_preferences():
        if 'user_email' not in session:
            return jsonify({'success': False, 'error': 'Not logged in'}), 401
            
        try:
            data = request.json
            
            # Save preferences to session
            session['email_sync_frequency'] = int(data.get('email_sync_frequency', 24))
            session['email_days_back'] = int(data.get('email_days_back', 30))
            session['urgent_alerts_enabled'] = bool(data.get('urgent_alerts_enabled', True))
            
            return jsonify({'success': True})
        except Exception as e:
            logger.error(f"Error saving preferences: {str(e)}")
            return jsonify({'success': False, 'error': str(e)}), 500
            
    @app.route('/disconnect-gmail')
    def disconnect_gmail():
        if 'google_oauth_token' in session:
            del session['google_oauth_token']
        if 'last_email_sync' in session:
            del session['last_email_sync']
            
        # Redirect to settings page
        return redirect(url_for('settings'))
        
    @app.route('/api/sync-status')
    def api_sync_status():
        global sync_status
        
        if 'user_email' not in session:
            return jsonify({'error': 'Not authenticated'}), 401
            
        # Only return sync status for the current user
        if sync_status.get('user_email') == session.get('user_email'):
            # If sync is complete, update session with insights
            if not sync_status.get('is_syncing') and sync_status.get('progress') == 100:
                session['email_insights'] = sync_status.get('email_insights', {})
                session['last_email_sync'] = sync_status.get('last_sync', datetime.now().strftime("%Y-%m-%d %H:%M"))
                
            return jsonify({
                'is_syncing': sync_status.get('is_syncing', False),
                'progress': sync_status.get('progress', 0),
                'sync_type': sync_status.get('sync_type', ''),
                'redirect': '/email-insights' if not sync_status.get('is_syncing') and sync_status.get('progress') == 100 else None
            })
        else:
            # No sync status for this user
            return jsonify({
                'is_syncing': False,
                'progress': 0,
                'sync_type': '',
                'redirect': '/settings'
            })
        
    @app.route('/api/email-insights')
    def api_email_insights():
        if 'user_email' not in session:
            return jsonify({'error': 'Not authenticated'}), 401
            
        # Check if we need to sync first
        last_sync = session.get('last_email_sync')
        if not last_sync:
            return jsonify({
                'status': 'no_data',
                'message': 'No email insights available yet. Please sync your emails first.'
            })
        
        # Get insights from session
        insights = session.get('email_insights', {})
        
        # Add last sync time to the response
        insights['last_sync'] = last_sync
        insights['status'] = 'success'
        
        return jsonify(insights)
                # Use insights from session if available
                insights = session['email_insights']
                logger.info("API: Using email insights from session")
            else:
                # If not available, fetch them
                logger.info("API: Fetching new email insights")
                from backend.core.claude_integration.email_intelligence import EmailIntelligence
                email_intelligence = EmailIntelligence(claude_client)
                insights = email_intelligence.analyze_recent_emails(user_email, access_token, days_back=30)
                session['email_insights'] = insights
            
            # Add last sync time to the response
            insights['last_sync'] = last_sync
            insights['status'] = 'success'
            
            return jsonify(insights)
                
        except Exception as e:
            logger.error(f"API email insights error: {str(e)}")
            return jsonify({'error': f'Email insights error: {str(e)}'}), 500
    
    return app

if __name__ == '__main__':
    app = create_app()
    app.run(host='0.0.0.0', port=8080, debug=True)
